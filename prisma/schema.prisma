// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  password     String
  address      String
  phoneNumber  String
  role         String
  profileImage String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  cart         Cart?
  order        Order[]
  reviews      reviews[]
}

model Product {
  id                   String       @id @default(uuid())
  title                String
  description          String
  category             String
  price                Float
  discountPercentage   Float
  rating               Float
  stock                Int
  brand                String
  warrantyInformation  String
  shippingInformation  String
  availabilityStatus   String
  returnPolicy         String
  minimumOrderQuantity Int
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  thumbnail            String
  images               String[]
  cartItems            CartItems[]
  orderItems           OrderItems[]
  reviews              reviews[]
}

model Cart {
  id     String      @id @default(uuid())
  userId String      @unique
  user   Users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  CartItems[]
}

model CartItems {
  id        String  @id @default(uuid())
  cartId    String  @unique
  productId String  @unique
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)
  price     Float
}

model Order {
  id        String       @id @default(uuid())
  user      Users        @relation(fields: [userId], references: [id])
  userId    String
  total     Float
  status    String
  items     OrderItems[]
  createdAt DateTime     @default(now())
}

model OrderItems {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [OrderId], references: [id])
  OrderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String  @unique
  quantity  Int
  price     Float
}

model reviews {
  id        String   @id @default(uuid())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      Users    @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}
